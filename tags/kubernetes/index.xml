<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>kubernetes - 标签 - 蜷缩的蜗牛</title><link>https://kbsonlong.github.io/sre/tags/kubernetes/</link><description>kubernetes - 标签 - 蜷缩的蜗牛</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>kbsonlong@gmail.com (kbsonlong)</managingEditor><webMaster>kbsonlong@gmail.com (kbsonlong)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 07 Jul 2023 16:50:30 +0800</lastBuildDate><atom:link href="https://kbsonlong.github.io/sre/tags/kubernetes/" rel="self" type="application/rss+xml"/><item><title>01-利用vscode与kind搭建kubernetes开发环境</title><link>https://kbsonlong.github.io/sre/posts/44f039/</link><pubDate>Fri, 07 Jul 2023 16:50:30 +0800</pubDate><author>kbsonlong</author><guid>https://kbsonlong.github.io/sre/posts/44f039/</guid><description><![CDATA[<p>基于<a
  href="https://github.com/kubernetes/kubernetes/tree/v1.27.0"
  
  
    
    
    target="_blank"
  
  
    rel="external nofollow noopener noreferrer"
  
  
  
>1.27.0</a>版本</p>
<h2 id="kind-创建集群">Kind 创建集群</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">cat &lt;&lt; EOF &gt; dev.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Cluster</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;kind.x-k8s.io/v1alpha4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kubeadmConfigPatches</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">  apiVersion: kubeadm.k8s.io/v1beta1
</span></span></span><span class="line"><span class="cl"><span class="sd">  kind: ClusterConfiguration
</span></span></span><span class="line"><span class="cl"><span class="sd">  metadata:
</span></span></span><span class="line"><span class="cl"><span class="sd">    name: dev
</span></span></span><span class="line"><span class="cl"><span class="sd">  imageRepository: registry.aliyuncs.com/google_containers</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networking</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">podSubnet</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10.8.0.0/16&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">serviceSubnet</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10.9.0.0/16&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">role</span><span class="p">:</span><span class="w"> </span><span class="l">control-plane</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">kindest/node:v1.27.0@sha256:c6b22e613523b1af67d4bc8a0c38a4c3ea3a2b8fbc5b367ae36345c9cb844518</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">extraPortMappings</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">2379</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">EOF</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">kind create cluster --name dev --config=dev.yaml</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>源码分析 kubernetes scheduler 核心调度器的实现原理</title><link>https://kbsonlong.github.io/sre/posts/a3f5fa/</link><pubDate>Tue, 18 Apr 2023 21:53:59 +0800</pubDate><author>kbsonlong</author><guid>https://kbsonlong.github.io/sre/posts/a3f5fa/</guid><description>基于 kubernetes v1.27.0 源码分析 scheduler 调度器 k8s scheduler 的主要职责是为新创建的 pod 寻找一个最合适的 node 节点, 然后进行 bind node 绑定, 后面 kubelet 才会监听到并创建真正的 pod. 那么问题来了, 如</description></item><item><title>企业级弹性伸缩和优化建设</title><link>https://kbsonlong.github.io/sre/posts/6ac5f6/</link><pubDate>Mon, 01 Aug 2022 09:54:52 +0800</pubDate><author>kbsonlong</author><guid>https://kbsonlong.github.io/sre/posts/6ac5f6/</guid><description><![CDATA[<p>什么是弹性伸缩？弹性伸缩和成本优化是何关系？ 应该如何做好企业级弹性伸缩与成本优化建设？</p>
<h2 id="一-背景">一 背景</h2>
<p>传统意义上来讲，弹性伸缩主要解决的问题是容量规划与实际负载的矛盾, 这矛盾通常因为资源使用普遍具有以下几个问题导致：</p>
<blockquote>
<p>（1）在线服务申请资源时考虑到突发流量和服务稳定性，预留大量的 buffer 资源，造成资源申请量普遍远超实际使用量。</p>
</blockquote>
<blockquote>
<p>（2）大部分在线服务的潮汐现象、波峰波谷特征非常明显，保留过多常态资源造成巨大浪费。</p>
</blockquote>
<blockquote>
<p>（3）开发和运维评估和配置的资源规格不合理，并且动态更新不及时。</p>
</blockquote>]]></description></item><item><title>理解 Kubernetes 的亲和性调度</title><link>https://kbsonlong.github.io/sre/posts/understand-kubernetes-affinity/</link><pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate><author>kbsonlong</author><guid>https://kbsonlong.github.io/sre/posts/understand-kubernetes-affinity/</guid><description><![CDATA[<p>一般情况下我们部署的 POD 是通过集群自动调度选择某个节点的，默认情况下调度器考虑的是资源足够，并且负载尽量平均，但是有的时候我们需要能够更加细粒度的去控制 POD 的调度，比如我们内部的一些服务 gitlab 之类的也是跑在<code>Kubernetes</code>集群上的，我们就不希望对外的一些服务和内部的服务跑在同一个节点上了，害怕内部服务对外部的服务产生影响；有的时候呢我们两个服务直接交流比较频繁，又希望能够将这两个服务的 POD 调度到同样的节点上。这就需要用到 Kubernetes 里面的一个概念：亲和性，亲和性主要分为两类：<code>nodeAffinity</code>和<code>podAffinity</code>。</p>]]></description></item></channel></rss>